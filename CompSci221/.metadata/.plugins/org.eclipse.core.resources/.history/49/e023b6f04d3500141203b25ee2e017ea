import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class GridMonitor implements GridMonitorInterface {
	Scanner scan;
	int rows, cols;
	double sumGrid[][], baseGrid[][], avgGrid[][], deltaGrid[][];
	boolean dangerGrid[][];


	public GridMonitor(String filename) throws FileNotFoundException {
			scan = new Scanner(new File(filename));
			rows = scan.nextInt();
			cols = scan.nextInt();
			baseGrid = new double[(int) rows][(int) cols];
			sumGrid = new double[(int) rows][(int) cols];
			avgGrid = new double[(int) rows][(int) cols];
			deltaGrid = new double[(int) rows][(int) cols];
			dangerGrid = new boolean[(int) rows][(int) cols];
			
			for (int row = 0; row < rows; row++){
				for (int col = 0; col < cols; col++){
					baseGrid[row][col] = scan.nextDouble();
				}
			}
			dangerGrid = getDangerGrid();
			avgGrid = getSurroundingAvgGrid();
			deltaGrid = getDeltaGrid();
			sumGrid = getSurroundingSumGrid();
	}
	@Override
	public double[][] getBaseGrid() {
		double copyBaseGrid[][] = new double[rows][cols];
		for(int i = 0; i < rows; i++){
			for(int j = 0; j < cols; j++){
				copyBaseGrid[i][j] = baseGrid[i][j];
			}
		}
		return copyBaseGrid;
	}

	@Override
	public double[][] getSurroundingSumGrid() {
		for (int i = 0; i < rows; i++){
			for (int j =0; j < cols; j++){
				double currentSum = 0;
				//north
				if(i + 1 < rows){
					currentSum += baseGrid[i + 1][j];
				}else {
					currentSum += baseGrid[i][j];
				}
				//south
				if (i -1 >= 0){
					currentSum += baseGrid[i-1][j];
				}else{
					currentSum += baseGrid[i][j];
				}
				//east
				if (j +1 < cols){
					currentSum += baseGrid[i][j+1];
				}else{
					currentSum += baseGrid[i][j];
				}
				//west
				if (j -1 >= 0){
					currentSum += baseGrid[i][j-1];
				}else{
					currentSum += baseGrid[i][j];
				}
				
				
				//System.out.println( currentSum);
				sumGrid[i][j] = currentSum;
			}
		}
		return sumGrid;
	}

	@Override
	public double[][] getSurroundingAvgGrid() {
		double copyAvgGrid[][] = new double[rows][cols];
		for(int i = 0; i < rows; i++){
			for(int j = 0; j < cols; j++){
				double average = sumGrid[i][j] / 4;
				avgGrid[i][j] = average;
				copyAvgGrid[i][j] = avgGrid[i][j];
			}
		}
		return copyAvgGrid;
	}

	@Override
	public double[][] getDeltaGrid() {
		double copyDeltaGrid[][] = new double[rows][cols];
		for (int i = 0; i < rows; i++){
			for(int j = 0; j < cols; j++){
				double delta = avgGrid[i][j] * 0.5;
				deltaGrid[i][j] = delta;
				copyDeltaGrid[i][j] = deltaGrid[i][j];
			}
		}
		return copyDeltaGrid;
	}

	@Override
	public boolean[][] getDangerGrid() {
		for (int i = 0; i < rows; i++){
			for(int j = 0; j < cols; j++){
				boolean danger = false;
				if ((baseGrid[i][j] < (avgGrid[i][j] - deltaGrid[i][j])) ||
						(baseGrid[i][j] > (avgGrid[i][j] + deltaGrid[i][j]))){
					danger = true;
				}else danger = false;
				dangerGrid[i][j] = danger;
			}
		}
		
		return dangerGrid;
	}
	
}
