import java.util.LinkedList;
import java.util.Iterator;

/**
 *
 * @author scrabtre
 * @author cgoetz
 *
 */
public class Cache<T extends Comparable<T>> implements Iterable<T>{
	int cap;
	LinkedList<T> data;
	
	public Cache(int CacheSize){
		data = new LinkedList<T>();
		cap = CacheSize;
	}
	
	public boolean check(T checkCache){
		return data.contains(checkCache);
	}
	
	public T remove(T obj){
		T out = null;
		T cur = null;
		for(Iterator<T> i = data.iterator(); i.hasNext();){
			cur = i.next();
			if(cur.compareTo(obj) == 0){
				out = cur;
				i.remove();
				break;
			}
		}
		return out;
	}
	
	public T add(T addObj){
		data.push(addObj);
		if(data.size() > cap){
			return data.removeLast();
		}
		return null;
	}
	
	public Iterator<T> iterator(){
		return data.iterator();
	}
}